
<?xml version="1.0" encoding="UTF-8"?>

<!-- файл pom - конфигуратор проекта-->

<!--В самом верху документа указывается что это xml документ,
его версия и кодировка: <?xml version=»1.0″ encoding=»UTF-8″?>-->

<!--Далее идет тег project. В него уже и будут помещаться
все остальные теги, которые Вы будете создавать.-->

<!--Корневой элемент и заголовок:-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>


<!--Информация по Вашему проекту (обязательная, необходима Maven-у)(В Maven каждый проект идентифицируется парой groupId, artifactId.):
В репозитории проект выглядит следующим образом: groupId:artifactId:version.

1)groupId (имена и структура пакетов),
2) artifactId (название проекта),
(В Maven каждый проект идентифицируется парой groupId artifactId.
Во избежание конфликта имён, groupId - наименование организации или подразделения
и обычно действуют такие же правила как и при именовании пакетов в Java -
записывают доменное имя организации или сайта проекта. artifactId - название проекта.)

3)version (версия вашего приложения),

Если состояние кода для проекта не зафиксировано, то в конце к имени версии добавляется
"-SNAPSHOT" что обозначает, что версия в разработке и результирующий jar файл может меняться-->

    <groupId>TK_oschadbank</groupId>
    <artifactId>TK_oschadbank</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--Также добавляется информация, которая не используется самим мавеном,
     но нужна для программиста, чтобы понять, о чём этот проект:
    1)name -  имя  Вашего проекта( для человека)
    2)description - Описание проекта
    3)url - сайт проекта.-->

    <name>TK_oschadbank</name>
    <!-- FIXME change it to the project's website -->
    <url>ob-committees.ext5.lizard.net.ua</url>

    <!--Maven — инструмент для сборки джава проектов. Помимо подключения сторонних
    библиотек он используется для компиляции, создания jar,
    создания дистрибутива программы, генерации документации. -->

    <!--В тег properties можно добавлять так называемые свойства. -->

    <properties>

        <!--
        2)3)Для использования возможности языка Java 7 ( -source 1.7 ),
        а также хотите, чтобы скомпилированные классы были совместимы
        с JVM 1.7 ( -target 1.7 ),  добавляем два следующих свойства,
        которые являются свойством по умолчанию. имена для параметров плагина:-->

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <aspectj.version>1.8.9</aspectj.version>
        <compiler.version>1.7</compiler.version>


    </properties>

    <!--Далее идет тег dependencies — в него помещаются все зависимости проекта:
    библиотеки, фреймворки, модули, другие проекты.-->

    <!-- JUnit  — это фреймворк автоматического тестирования  кода
    необходим для запуска тестов (помощник для запуска тестов)

    также, в строчке <scope>test<scope>  указана область видимости junit-а
    - виден только в package test, а нам необходимо, чтобы он был виден отовсюду - удаляем строчку -->

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <!-- <scope>test</scope>, тут удаляем строчку-->
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-server -->
        <!-- maven driver dependency - Selenium Server -->

        <!-- встроить сервер Selenium в проект: Selenium Server – это сервер, который позволяет управлять браузером с удалённой
        машины, по сети. Сначала на той машине, где должен работать браузер, устанавливается и запускается сервер.
        Затем на другой машине (технически можно и на той же самой, конечно) запускается программа,
        которая, используя специальный драйвер RemoteWebDriver, соединяется с сервером и отправляет ему команды.
        Он в свою очередь запускает браузер и выполняет в нём эти команды, используя драйвер, соответствующий этому браузеру -->

        <!-- После подключение Selenium к проекту -  закидываем вебдрайвер (chromedriver.exe)
         в папку drivers и создаем объект webDriver, который будет обращаться к chromedriver.exe) - это
          необходимо для подвязки Java с "chromedriver.exe"-->

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-server</artifactId>
            <version>3.12.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/log4j/log4j -->
        <!--   официальный логгер Java -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.rest-assured/rest-assured -->
        <!-- - одна из самых распространенных Java-библиотек для автоматизации тестирования REST-API-->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.json/json -->
        <!--библиотека обработки JSON для создания, манипулирования и анализирования JSON-->

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20180130</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.aeonbits.owner/owner -->
        <!--  библиотека для работы с .properties-->

        <dependency>
            <groupId>org.aeonbits.owner</groupId>
            <artifactId>owner</artifactId>
            <version>1.0.4</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
        <!--Apache POI — это библиотека на языке Java для чтения и записи документов Microsoft Office, таких как Excel,
        PowerPoint и Word.-->

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.14</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <!--MySQL java connector-->

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.18</version>
        </dependency>

        <!--Подключение к проекту с автотестами адаптера для получение информации о выполнении автотеста,
        из которой потом будет сформирован информативный Allure–отчет.
        Данный адаптер позволяет собирать информацию из тестов, разработанных с использованием фреймворка Junit4.  -->

        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-junit4</artifactId>
            <version>2.0-BETA13</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
        <!--Gson - это библиотека Java с открытым исходным кодом,
        которая может быть использована для преобразования объектов Java
        в их представление JSON. Его также можно использовать для преобразования
        строки JSON в эквивалентный объект Java.-->

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.5</version>
        </dependency>

    </dependencies>

    <build>
        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
            <plugins>
                <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.7.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>


                <!--данній плагин для подключения  зависимости, указанной выше:

                <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-junit4</artifactId>
            <version>2.0-BETA13</version>
            </dependency>
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.20</version>
                    <configuration>
                        <parallel>classes</parallel>
                        <threadCount>3</threadCount>
                        <argLine>
                            -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
                        </argLine>
                        <properties>
                            <property>
                                <name>listener</name>
                                <value>io.qameta.allure.junit4.AllureJunit4</value>
                            </property>
                        </properties>
                        <systemProperties>
                            <property>
                                <name>allure.results.directory</name>
                                <value>${project.build.directory}/allure-results</value>
                            </property>
                            <property>
                                <name>allure.link.issue.pattern</name>
                                <value>https://example.org/issue/{}</value>
                            </property>
                        </systemProperties>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.aspectj</groupId>
                            <artifactId>aspectjweaver</artifactId>
                            <version>${aspectj.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>io.qameta.allure</groupId>
                    <artifactId>allure-maven</artifactId>
                    <version>2.8</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <resources>
            <resource>
                <directory>src/resourses</directory>
            </resource>
            <resource>
                <directory>src/main/java</directory>
            </resource>
        </resources>
    </build>
</project>
